import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./browser-storage.service";
export class StoragePersistenceService {
    constructor(browserStorageService) {
        this.browserStorageService = browserStorageService;
    }
    read(key, config) {
        const storedConfig = this.browserStorageService.read(key, config) || {};
        return storedConfig[key];
    }
    write(key, value, config) {
        const storedConfig = this.browserStorageService.read(key, config) || {};
        storedConfig[key] = value;
        return this.browserStorageService.write(storedConfig, config);
    }
    remove(key, config) {
        const storedConfig = this.browserStorageService.read(key, config) || {};
        delete storedConfig[key];
        this.browserStorageService.write(storedConfig, config);
    }
    clear(config) {
        this.browserStorageService.clear(config);
    }
    resetStorageFlowData(config) {
        this.remove('session_state', config);
        this.remove('storageSilentRenewRunning', config);
        this.remove('storageCodeFlowInProgress', config);
        this.remove('codeVerifier', config);
        this.remove('userData', config);
        this.remove('storageCustomParamsAuthRequest', config);
        this.remove('access_token_expires_at', config);
        this.remove('storageCustomParamsRefresh', config);
        this.remove('storageCustomParamsEndSession', config);
        this.remove('reusable_refresh_token', config);
    }
    resetAuthStateInStorage(config) {
        this.remove('authzData', config);
        this.remove('reusable_refresh_token', config);
        this.remove('authnResult', config);
    }
    getAccessToken(config) {
        return this.read('authzData', config);
    }
    getIdToken(config) {
        return this.read('authnResult', config)?.id_token;
    }
    getRefreshToken(config) {
        let refreshToken = this.read('authnResult', config)?.refresh_token;
        if (!refreshToken && config.allowUnsafeReuseRefreshToken) {
            return this.read('reusable_refresh_token', config);
        }
        return refreshToken;
    }
    getAuthenticationResult(config) {
        return this.read('authnResult', config);
    }
}
StoragePersistenceService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: StoragePersistenceService, deps: [{ token: i1.BrowserStorageService }], target: i0.ɵɵFactoryTarget.Injectable });
StoragePersistenceService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: StoragePersistenceService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: StoragePersistenceService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.BrowserStorageService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZS1wZXJzaXN0ZW5jZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhci1hdXRoLW9pZGMtY2xpZW50L3NyYy9saWIvc3RvcmFnZS9zdG9yYWdlLXBlcnNpc3RlbmNlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7O0FBMEIzQyxNQUFNLE9BQU8seUJBQXlCO0lBQ3BDLFlBQTZCLHFCQUE0QztRQUE1QywwQkFBcUIsR0FBckIscUJBQXFCLENBQXVCO0lBQUcsQ0FBQztJQUU3RSxJQUFJLENBQUMsR0FBZ0IsRUFBRSxNQUEyQjtRQUNoRCxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFeEUsT0FBTyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVELEtBQUssQ0FBQyxHQUFnQixFQUFFLEtBQVUsRUFBRSxNQUEyQjtRQUM3RCxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFeEUsWUFBWSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUUxQixPQUFPLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFFRCxNQUFNLENBQUMsR0FBZ0IsRUFBRSxNQUEyQjtRQUNsRCxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFeEUsT0FBTyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFekIsSUFBSSxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVELEtBQUssQ0FBQyxNQUEyQjtRQUMvQixJQUFJLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRCxvQkFBb0IsQ0FBQyxNQUEyQjtRQUM5QyxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMsTUFBTSxDQUFDLDJCQUEyQixFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxNQUFNLENBQUMsMkJBQTJCLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDakQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDaEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQ0FBZ0MsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN0RCxJQUFJLENBQUMsTUFBTSxDQUFDLHlCQUF5QixFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQy9DLElBQUksQ0FBQyxNQUFNLENBQUMsNEJBQTRCLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDbEQsSUFBSSxDQUFDLE1BQU0sQ0FBQywrQkFBK0IsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsTUFBTSxDQUFDLHdCQUF3QixFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRCx1QkFBdUIsQ0FBQyxNQUEyQjtRQUNqRCxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNqQyxJQUFJLENBQUMsTUFBTSxDQUFDLHdCQUF3QixFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzlDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxjQUFjLENBQUMsTUFBMkI7UUFDeEMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBRUQsVUFBVSxDQUFDLE1BQTJCO1FBQ3BDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLEVBQUUsUUFBUSxDQUFDO0lBQ3BELENBQUM7SUFFRCxlQUFlLENBQUMsTUFBMkI7UUFDekMsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLEVBQUUsYUFBYSxDQUFDO1FBRW5FLElBQUksQ0FBQyxZQUFZLElBQUksTUFBTSxDQUFDLDRCQUE0QixFQUFFO1lBQ3hELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxNQUFNLENBQUMsQ0FBQztTQUNwRDtRQUVELE9BQU8sWUFBWSxDQUFDO0lBQ3RCLENBQUM7SUFFRCx1QkFBdUIsQ0FBQyxNQUEyQjtRQUNqRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzFDLENBQUM7O3NIQXBFVSx5QkFBeUI7MEhBQXpCLHlCQUF5QjsyRkFBekIseUJBQXlCO2tCQURyQyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPcGVuSWRDb25maWd1cmF0aW9uIH0gZnJvbSAnLi8uLi9jb25maWcvb3BlbmlkLWNvbmZpZ3VyYXRpb24nO1xyXG5pbXBvcnQgeyBCcm93c2VyU3RvcmFnZVNlcnZpY2UgfSBmcm9tICcuL2Jyb3dzZXItc3RvcmFnZS5zZXJ2aWNlJztcclxuXHJcbmV4cG9ydCB0eXBlIFN0b3JhZ2VLZXlzID1cclxuICB8ICdhdXRoblJlc3VsdCdcclxuICB8ICdhdXRoekRhdGEnXHJcbiAgfCAnYWNjZXNzX3Rva2VuX2V4cGlyZXNfYXQnXHJcbiAgfCAnYXV0aFdlbGxLbm93bkVuZFBvaW50cydcclxuICB8ICd1c2VyRGF0YSdcclxuICB8ICdhdXRoTm9uY2UnXHJcbiAgfCAnY29kZVZlcmlmaWVyJ1xyXG4gIHwgJ2F1dGhTdGF0ZUNvbnRyb2wnXHJcbiAgfCAncmV1c2FibGVfcmVmcmVzaF90b2tlbidcclxuICB8ICdzZXNzaW9uX3N0YXRlJ1xyXG4gIHwgJ3N0b3JhZ2VTaWxlbnRSZW5ld1J1bm5pbmcnXHJcbiAgfCAnc3RvcmFnZUNvZGVGbG93SW5Qcm9ncmVzcydcclxuICB8ICdzdG9yYWdlQ3VzdG9tUGFyYW1zQXV0aFJlcXVlc3QnXHJcbiAgfCAnc3RvcmFnZUN1c3RvbVBhcmFtc1JlZnJlc2gnXHJcbiAgfCAnc3RvcmFnZUN1c3RvbVBhcmFtc0VuZFNlc3Npb24nXHJcbiAgfCAncmVkaXJlY3QnXHJcbiAgfCAnY29uZmlnSWRzJ1xyXG4gIHwgJ2p3dEtleXMnXHJcbiAgfCAncG9wdXBhdXRoJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFN0b3JhZ2VQZXJzaXN0ZW5jZVNlcnZpY2Uge1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgYnJvd3NlclN0b3JhZ2VTZXJ2aWNlOiBCcm93c2VyU3RvcmFnZVNlcnZpY2UpIHt9XHJcblxyXG4gIHJlYWQoa2V5OiBTdG9yYWdlS2V5cywgY29uZmlnOiBPcGVuSWRDb25maWd1cmF0aW9uKTogYW55IHtcclxuICAgIGNvbnN0IHN0b3JlZENvbmZpZyA9IHRoaXMuYnJvd3NlclN0b3JhZ2VTZXJ2aWNlLnJlYWQoa2V5LCBjb25maWcpIHx8IHt9O1xyXG5cclxuICAgIHJldHVybiBzdG9yZWRDb25maWdba2V5XTtcclxuICB9XHJcblxyXG4gIHdyaXRlKGtleTogU3RvcmFnZUtleXMsIHZhbHVlOiBhbnksIGNvbmZpZzogT3BlbklkQ29uZmlndXJhdGlvbik6IGJvb2xlYW4ge1xyXG4gICAgY29uc3Qgc3RvcmVkQ29uZmlnID0gdGhpcy5icm93c2VyU3RvcmFnZVNlcnZpY2UucmVhZChrZXksIGNvbmZpZykgfHwge307XHJcblxyXG4gICAgc3RvcmVkQ29uZmlnW2tleV0gPSB2YWx1ZTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5icm93c2VyU3RvcmFnZVNlcnZpY2Uud3JpdGUoc3RvcmVkQ29uZmlnLCBjb25maWcpO1xyXG4gIH1cclxuXHJcbiAgcmVtb3ZlKGtleTogU3RvcmFnZUtleXMsIGNvbmZpZzogT3BlbklkQ29uZmlndXJhdGlvbik6IHZvaWQge1xyXG4gICAgY29uc3Qgc3RvcmVkQ29uZmlnID0gdGhpcy5icm93c2VyU3RvcmFnZVNlcnZpY2UucmVhZChrZXksIGNvbmZpZykgfHwge307XHJcblxyXG4gICAgZGVsZXRlIHN0b3JlZENvbmZpZ1trZXldO1xyXG5cclxuICAgIHRoaXMuYnJvd3NlclN0b3JhZ2VTZXJ2aWNlLndyaXRlKHN0b3JlZENvbmZpZywgY29uZmlnKTtcclxuICB9XHJcblxyXG4gIGNsZWFyKGNvbmZpZzogT3BlbklkQ29uZmlndXJhdGlvbik6IHZvaWQge1xyXG4gICAgdGhpcy5icm93c2VyU3RvcmFnZVNlcnZpY2UuY2xlYXIoY29uZmlnKTtcclxuICB9XHJcblxyXG4gIHJlc2V0U3RvcmFnZUZsb3dEYXRhKGNvbmZpZzogT3BlbklkQ29uZmlndXJhdGlvbik6IHZvaWQge1xyXG4gICAgdGhpcy5yZW1vdmUoJ3Nlc3Npb25fc3RhdGUnLCBjb25maWcpO1xyXG4gICAgdGhpcy5yZW1vdmUoJ3N0b3JhZ2VTaWxlbnRSZW5ld1J1bm5pbmcnLCBjb25maWcpO1xyXG4gICAgdGhpcy5yZW1vdmUoJ3N0b3JhZ2VDb2RlRmxvd0luUHJvZ3Jlc3MnLCBjb25maWcpO1xyXG4gICAgdGhpcy5yZW1vdmUoJ2NvZGVWZXJpZmllcicsIGNvbmZpZyk7XHJcbiAgICB0aGlzLnJlbW92ZSgndXNlckRhdGEnLCBjb25maWcpO1xyXG4gICAgdGhpcy5yZW1vdmUoJ3N0b3JhZ2VDdXN0b21QYXJhbXNBdXRoUmVxdWVzdCcsIGNvbmZpZyk7XHJcbiAgICB0aGlzLnJlbW92ZSgnYWNjZXNzX3Rva2VuX2V4cGlyZXNfYXQnLCBjb25maWcpO1xyXG4gICAgdGhpcy5yZW1vdmUoJ3N0b3JhZ2VDdXN0b21QYXJhbXNSZWZyZXNoJywgY29uZmlnKTtcclxuICAgIHRoaXMucmVtb3ZlKCdzdG9yYWdlQ3VzdG9tUGFyYW1zRW5kU2Vzc2lvbicsIGNvbmZpZyk7XHJcbiAgICB0aGlzLnJlbW92ZSgncmV1c2FibGVfcmVmcmVzaF90b2tlbicsIGNvbmZpZyk7XHJcbiAgfVxyXG5cclxuICByZXNldEF1dGhTdGF0ZUluU3RvcmFnZShjb25maWc6IE9wZW5JZENvbmZpZ3VyYXRpb24pOiB2b2lkIHtcclxuICAgIHRoaXMucmVtb3ZlKCdhdXRoekRhdGEnLCBjb25maWcpO1xyXG4gICAgdGhpcy5yZW1vdmUoJ3JldXNhYmxlX3JlZnJlc2hfdG9rZW4nLCBjb25maWcpO1xyXG4gICAgdGhpcy5yZW1vdmUoJ2F1dGhuUmVzdWx0JywgY29uZmlnKTtcclxuICB9XHJcblxyXG4gIGdldEFjY2Vzc1Rva2VuKGNvbmZpZzogT3BlbklkQ29uZmlndXJhdGlvbik6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5yZWFkKCdhdXRoekRhdGEnLCBjb25maWcpO1xyXG4gIH1cclxuXHJcbiAgZ2V0SWRUb2tlbihjb25maWc6IE9wZW5JZENvbmZpZ3VyYXRpb24pOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMucmVhZCgnYXV0aG5SZXN1bHQnLCBjb25maWcpPy5pZF90b2tlbjtcclxuICB9XHJcblxyXG4gIGdldFJlZnJlc2hUb2tlbihjb25maWc6IE9wZW5JZENvbmZpZ3VyYXRpb24pOiBzdHJpbmcge1xyXG4gICAgbGV0IHJlZnJlc2hUb2tlbiA9IHRoaXMucmVhZCgnYXV0aG5SZXN1bHQnLCBjb25maWcpPy5yZWZyZXNoX3Rva2VuO1xyXG5cclxuICAgIGlmICghcmVmcmVzaFRva2VuICYmIGNvbmZpZy5hbGxvd1Vuc2FmZVJldXNlUmVmcmVzaFRva2VuKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnJlYWQoJ3JldXNhYmxlX3JlZnJlc2hfdG9rZW4nLCBjb25maWcpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZWZyZXNoVG9rZW47XHJcbiAgfVxyXG5cclxuICBnZXRBdXRoZW50aWNhdGlvblJlc3VsdChjb25maWc6IE9wZW5JZENvbmZpZ3VyYXRpb24pOiBhbnkge1xyXG4gICAgcmV0dXJuIHRoaXMucmVhZCgnYXV0aG5SZXN1bHQnLCBjb25maWcpO1xyXG4gIH1cclxufVxyXG4iXX0=